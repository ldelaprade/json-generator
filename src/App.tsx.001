import React, { useState } from 'react';
import { Container, Button, makeStyles, Snackbar } from '@material-ui/core';
import MuiAlert, { AlertProps } from '@material-ui/lab/Alert';
import Ajv from 'ajv';
import VersionUrlSection from './components/VersionUrlSection';
import AhrsSection from './components/AhrsSection';
import DateTimeSourceSection from './components/DateTimeSourceSection';
import WogSourceSection from './components/WogSourceSection';
import Arinc429Section from './components/Arinc429Section';
import IgnoredBitsSection from './components/IgnoredBitsSection';
import schemaModel from './schema_model.json';

const ajv = new Ajv({ allErrors: true });
const validate = ajv.compile(schemaModel);

function Alert(props: AlertProps) {
  return <MuiAlert elevation={6} variant="filled" {...props} />;
}

const useStyles = makeStyles((theme) => ({
  root: {
    marginTop: theme.spacing(4),
    marginBottom: theme.spacing(4),
  },
  button: {
    marginTop: theme.spacing(2),
    marginRight: theme.spacing(2),
  },
}));

const App: React.FC = () => {
  const classes = useStyles();
  const [formData, setFormData] = useState({
    // ... (initial state as before)
  });
  const [errors, setErrors] = useState<string[]>([]);
  const [showError, setShowError] = useState(false);

  const handleChange = (name: string, value: any) => {
    const newFormData = {
      ...formData,
      [name]: value
    };
    setFormData(newFormData);
    validateField(name, value);
  };

  const validateField = (name: string, value: any) => {
    const testData = { ...formData, [name]: value };
    validate(testData);
    const fieldErrors = (validate.errors || [])
      .filter(error => error.dataPath.startsWith('.' + name))
      .map(error => `${error.dataPath}: ${error.message}`);
    setErrors(fieldErrors);
    setShowError(fieldErrors.length > 0);
  };

  const handleGenerateJson = () => {
    if (validate(formData)) {
      // Generate and download JSON as before
      console.log('Valid JSON:', JSON.stringify(formData, null, 2));
    } else {
      const allErrors = (validate.errors || []).map(error => `${error.dataPath}: ${error.message}`);
      setErrors(allErrors);
      setShowError(true);
    }
  };

  const handleCloseError = (event?: React.SyntheticEvent, reason?: string) => {
    if (reason === 'clickaway') {
      return;
    }
    setShowError(false);
  };

  return (
    <Container maxWidth="md" className={classes.root}>
      <h1>JSON Generator</h1>
      <VersionUrlSection formData={formData} onChange={handleChange} />
      <AhrsSection formData={formData.ahrs} onChange={(value) => handleChange('ahrs', value)} />
      <DateTimeSourceSection formData={formData} onChange={handleChange} />
      <WogSourceSection formData={formData.wog_source} onChange={(value) => handleChange('wog_source', value)} />
      <Arinc429Section formData={formData.arinc429} onChange={(value) => handleChange('arinc429', value)} />
      <IgnoredBitsSection formData={formData.ignored_bits} onChange={(value) => handleChange('ignored_bits', value)} />
      <Button 
        variant="contained" 
        color="primary" 
        onClick={handleGenerateJson}
        className={classes.button}
      >
        Generate JSON
      </Button>
      <Snackbar open={showError} autoHideDuration={6000} onClose={handleCloseError}>
        <Alert onClose={handleCloseError} severity="error">
          {errors.join(', ')}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default App;